/**
 * File:	include/slp-server/dialogs.ycp
 * Package:	Configuration of slp-server
 * Summary:	Dialogs definitions
 * Authors:	Zugec Michal <mzugec@suse.cz>
 *
 * $Id$
 */

{

textdomain "slp-server";

import "Label";
import "Wizard";
import "SlpServer";
import "CWMTab";
import "CWM";
import "CWMServiceStart";
import "CWMFirewallInterfaces";
import "TablePopup";
import "LogView";
import "IP";
import "String";
import "Address";
include "slp-server/helps.ycp";

void initServerSettings(string key);
symbol handleServerSettings(string key, map event );
symbol handleShowLog(string key, map event );
symbol handleExpert(string key, map event );
void initExpert (string key);
list valuesServTable (map descr);
string Id2Key( map desc, any option_id );
map getServerOptions();
map getRegEditOptions();
void storeServerSettings(string option_id, map option_map);
string rowSummary (any option_id, string option_type);
void rowInit (any option_id, string option_type);
void rowStore (any option_id, string option_type);
boolean rowDelete (any opt_id, string opt_key);
boolean rowRegEditDelete (any opt_id, string opt_key);
symbol tableHandle (string table, map event);
void storeExpert (string key, map event);
void storeRegEdit (string key, map event);
boolean validateServerSettings(string key, map event);
void initReg (string key);
string rowRegSummary (any option_id, string option_type);
string Id2RegKey( map desc, any option_id );
list valuesRegTable (map descr);
boolean deleteReg (any opt_id, string opt_key);
symbol handleRegTable(string key, map event );
//symbol handleRegEditTable(string key, map event );
list valuesRegFile (map descr);
string Id2RegEditKey( map desc, any option_id );
void initRegEditExpert (string key);
list <map<string, any> > reg_file = [];
string rowRegEditSummary(any option_id, string option_type);
void rowRegEditInit (any option_id, string option_type);
void rowRegEditStore (any option_id, string option_type);

string current_tab="general";
list <string> keys = [];
map<string, any> copy_config=$[];
map<string, any> reg_files_pkg=$[];
string currentRegFile = "";


map<string, map <string, any> > widgets = $[
		// service status widget
            "auto_start_up" : CWMServiceStart::CreateAutoStartWidget ($[
                "get_service_auto_start" : SlpServer::GetStartService,
                "set_service_auto_start" : SlpServer::SetStartService,
                // radio button (starting SLP service - option 1)
                "start_auto_button" : _("When &Booting"),
                // radio button (starting SLP service - option 2)
                "start_manual_button" : _("&Manually"),
                "help" : sformat (CWMServiceStart::AutoStartHelpTemplate (),
                    // part of help text, used to describe radiobuttons (matching starting SLP service but without "&")
                    _("When Booting"),
                    // part of help text, used to describe radiobuttons (matching starting SLP service but without "&")
                    _("Manually")
                ),
            ]),

	// firewall widget
    "firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
        "services" : [ "service:openslp" ],
        "display_details" : true,
    ]),

    // button for view log files
    "view_log" :$[
	"widget" : `custom,
	"custom_widget" : `VBox(
				`PushButton(`id(`show_log), _("Show Log"))
				),
	"handle" : handleShowLog,
	"label" : _("Show Log"),
	"help" : HELPS["show_log"]:""
		],

    // button for expert settings (all config options)
    "expert" :$[
	"widget" : `custom,
	"custom_widget" : `VBox(
				`PushButton(`id(`expert), _("Expert Settings"))
				),
	"handle" : handleExpert,
	"label" : _("Expert Settings"),
	"help" : HELPS["expert"]:""
		],

     // response + scopes widget
     "server_settings" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
                  `RadioButtonGroup
                    (
                     `id(`resp),
                     `VBox( `Label(_("Response To")),
                     `Left(`RadioButton(`id(`bc),`opt(`notify ), _("Broadcast"))),
                     `Left(`RadioButton(`id(`mc),`opt(`notify ), _("Multicast"))),
                     `Left(`RadioButton(`id(`da),`opt(`notify ), _("DA Server"))),
		     `Left(`RadioButton(`id(`da_server), `opt(`notify), _("Becomes DA Server")))
                     )
                    ),
                  `TextEntry(`id(`ip), _("&IP Addresses of DA Servers")),
                  `TextEntry(`id(`scope), _("&Scopes"))
                 ),
        "init"   : initServerSettings,
        "handle" : handleServerSettings,
	"store"  : storeServerSettings,
        "validate_type" : `function,
        "validate_function" : validateServerSettings,
        "label"  : _("SLP Server Settings"),
        "help" : HELPS["server_settings"]:""
        ],

	// expert settings ;)
	"server_table" :
           TablePopup::CreateTableDescr (
            $["add_delete_buttons" : true, "up_down_buttons" : false, "unique_keys" : true],
             $[
              "init" : initExpert,
              "store" : storeExpert,
              "options" : getServerOptions(),
              "ids" : valuesServTable,
              "id2key" : Id2Key,
              "fallback" : $[
                "init" : rowInit,
                "store" : rowStore,
                "summary" : rowSummary,
                        ],
              "option_delete" : rowDelete,
              "add_items" : maplist(string k1, any v1, (map<string,any>) getServerOptions(), ``(k1)),
              "help" : HELPS["server_table"]:""
             ]
            ),

	// table with all files from /etc/slp.reg.d/
	"regedit_table" :
           TablePopup::CreateTableDescr (
            $["add_delete_buttons" : true, "up_down_buttons" : false, "unique_keys" : false],
             $[
              "init" : initRegEditExpert,
              "store" : storeRegEdit,
              "options" : getRegEditOptions(),
              "ids" : valuesRegFile,
              "id2key" : Id2RegEditKey,
              "fallback" : $[
                "init" : rowRegEditInit,
                "store" : rowRegEditStore,
                "summary" : rowRegEditSummary,
                        ],
              "option_delete" : rowRegEditDelete,
              "add_items" : maplist(string k1, any v1, (map<string,any>) getRegEditOptions(), ``(k1)),
             ]
            ),

	// parameters from given reg.d file
        "reg_table" :
           TablePopup::CreateTableDescr (
            $["add_delete_buttons" : true, "up_down_buttons" : false, "unique_keys" : false],
             $[
	      "init" : initReg,
              "id2key" : Id2RegKey,
              "ids" : valuesRegTable,
              "option_delete" : deleteReg,
               "fallback" : $[
			"summary" : rowRegSummary,
                        ],

              "help" : HELPS["reg_files"]:"",
	      "handle" : handleRegTable,
             ]
            ),
];


//	***	Expert Settings		***
define void initExpert (string key) ``{
    TablePopup::TableInit (CWM::GetProcessedWidget (), key);
}

define void storeExpert (string key, map event) ``{
 SlpServer::slp_config = copy_config;
 keys=[];
}

define list valuesServTable (map descr) {
 keys = [];
 foreach(string k1, any v1, copy_config, {
  if (v1 != nil) keys =add(keys, k1);
 });
 return keys;
}

define string Id2Key( map desc, any option_id ) ``{
 return (string) option_id;
}

define void rowInit (any option_id, string option_type) ``{
 UI::ChangeWidget (`id (option_type), `Value, copy_config[option_type]:"");
}

define string rowSummary (any option_id, string option_type)``{
 return copy_config[option_type]:"";
}

void rowStore (any option_id, string option_type) ``{
 copy_config[option_type]=(string)UI::QueryWidget (`id (option_type), `Value);
}

boolean rowDelete (any opt_id, string opt_key)``{
 copy_config[opt_key] = nil;
 return true;
}

define map getServerOptions() ``{
 return $[
	"net.slp.usescopes":$[],
	"net.slp.daaddresses":$[],
	"net.slp.isda":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.daheartbeat":$[],
	"net.slp.watchregistrationpid":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.maxresults":$[],
	"net.slp.isbroadcastonly":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.passivedadetection":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.activedadetection":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.daactivediscoveryinterval":$[],
	"net.slp.multicastttl":$[],
	"net.slp.dadiscoverymaximumwait":$[],
	"net.slp.dadiscoverytimeouts":$[],
	"net.slp.multicastmaximumwait":$[],
	"net.slp.multicasttimeouts":$[],
	"net.slp.unicastmaximumwait":$[],
	"net.slp.unicasttimeouts":$[],
	"net.slp.datagramtimeouts":$[],
	"net.slp.randomWaitbound":$[],
	"net.slp.mtu":$[],
	"net.slp.interfaces":$[],
	"net.slp.securityenabled":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.checksourceaddr":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.tracedatraffic":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.tracereg":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.tracedrop":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]],
	"net.slp.tracemsg":$["popup":$["items":[["true"], ["false"]], "widget":`combobox]]
	];
}

//	***	regedit_table	***
define void initRegEditExpert(string key) ``{
 integer count = 0;
 foreach(map<string, any> s, SlpServer::reg_files, {if (s["name"]:"" == currentRegFile) {
	 foreach(map<string, any > row, s["value"]:[], {
	  reg_file = add(reg_file, 
				$[tostring(count):
					$[ "KEY":row["name"]:"" , "VALUE":row["value"]:"" ]
				]
			);
	  count = count + 1;
	 });
	}
  });
    TablePopup::TableInit (CWM::GetProcessedWidget (), key);
}

define void storeRegEdit (string key, map event) ``{
 SlpServer::reg_files = maplist(map<string, any> file, SlpServer::reg_files, {
  if ( file["name"]:"" == currentRegFile )
   {

    integer count = 0;
    file["value"] = maplist(map<string, any> line, file["value"]:[], {
						line["value"] = (reg_file[count]:nil)[tostring(count), "VALUE"]:"";
						line["name"] = (reg_file[count]:nil)[tostring(count), "KEY"]:"";
     count = count + 1;
     return line;
    });

   while ( count < size(reg_file) ){
	file["value"] = add(file["value"]:[], $[
	"name" : (reg_file[count]:nil)[tostring(count), "KEY"]:"",
	"value" : (reg_file[count]:nil)[tostring(count), "VALUE"]:"",
	"type" : 1,
	"kind" : "value",
	"comment" : ""
	]);
	count = count + 1;
    }
   }
  return file;
 });
}

define map getRegEditOptions() ``{
 return $[
	"tcp-port":$[],
	"description":$[],
	"service":$[]
	];
}

define list valuesRegFile (map descr) {
 keys = [];
 foreach(map<string, any> row, reg_file, {
  foreach(string key, map<string, any> value, (map<string, map<string, any> >) row, {
  if ( value["KEY"]:"" != "") keys = add(keys, key);
  });
 });
 return keys;
}

define string Id2RegEditKey( map desc, any option_id ) ``{
 string ret = "";
 foreach(map<string, any> row, reg_file,{
 if (haskey(row, option_id))
	ret = (reg_file[ tointeger(option_id) ]:nil)[ tostring(option_id), "KEY"]:"";
 });
 return ret;
}

define void rowRegEditInit (any option_id, string option_type) ``{
 string ret="";
 if (option_id != nil)
  {
   foreach(map<string, any> row, reg_file, {
    if ( haskey(row, option_id) ) ret = (reg_file[ tointeger(option_id) ]:nil)[ tostring(option_id), "VALUE"]:"";
   });
  }
 UI::ChangeWidget (`id (option_type), `Value, ret);
}

void rowRegEditStore (any option_id, string option_type) ``{
  if (option_id != nil)
   {
    reg_file = maplist(map<string, any> s, reg_file, {
     if (haskey(s, option_id))
	s[tostring(option_id), "VALUE"] = UI::QueryWidget(`id(option_type), `Value);
	return s;
    });
   } else {
	reg_file=add(reg_file, $[tostring(size(reg_file)):$["KEY":option_type, "VALUE":UI::QueryWidget(`id(option_type), `Value)]]);
      }
}

define string rowRegEditSummary(any option_id, string option_type)``{
 string ret="";
 foreach(map<string, any> row, reg_file, {
  if ( haskey(row,option_id) ) ret = (reg_file[ tointeger(option_id) ]:nil)[ tostring(option_id), "VALUE"]:"";
 });
 return ret;
}

boolean rowRegEditDelete (any opt_id, string opt_key)``{
    reg_file = maplist(map<string, any> s, reg_file, {
     if (haskey(s, opt_id))
      {
        s[tostring(opt_id), "VALUE"] = "";
        s[tostring(opt_id), "KEY"] = "";
      }
        return s;
    });
 return true;
}

//	***	reg edit files		***
define void initReg (string key) ``{
    keys = [];
    reg_file=[];
    TablePopup::TableInit (CWM::GetProcessedWidget (), key);
}

define string Id2RegKey( map desc, any option_id ) ``{
 return (string) option_id;
}

define list valuesRegTable (map descr) {
 if (size(keys)==0)
  {
   keys = maplist(map<string, any> file, SlpServer::reg_files, {if (file["value"]:nil != nil) return file["name"]:"";});

   keys = filter(string file, (list<string>)keys, {return (file != nil); });

   foreach(string f, (list<string>)keys, {
         map res = (map)SCR::Execute(.target.bash_output, "rpm -qf "+f);
	 if (res["exit"]:0 == 1) reg_files_pkg[f] = "";
		else reg_files_pkg[f]=res["stdout"]:"";
          });
 }
 return keys;
}

define string rowRegSummary (any option_id, string option_type)``{
 return reg_files_pkg[option_type]:"";
}

boolean deleteReg (any opt_id, string opt_key)``{
 if (reg_files_pkg[opt_key]:"" == "")
  {
   keys=filter(string val, (list<string>)keys, {return (val!=opt_key);});
   return true;
  }
   else return false;
}

define symbol handleRegTable(string key, map event ) ``{
 if (event["ID"]:nil == `_tp_edit)
  {
   currentRegFile = (string)UI::QueryWidget (`_tp_table, `CurrentItem);
   return `edit;
  }
 if (event["ID"]:nil == `_tp_delete)
 {
	currentRegFile = (string)UI::QueryWidget (`_tp_table, `CurrentItem);
  string package = reg_files_pkg[currentRegFile]:"";
  if (package == "")
   {
	if (Popup::ContinueCancel(_("Really delete this file?")))
	 {
	  SlpServer::reg_files = maplist(map<string, any> s, SlpServer::reg_files, {
		if (s["name"]:"" == currentRegFile) s["value"]=nil;
		return s;
	  });
	  initReg("");
	}
   } else {
	   Popup::Error(sformat(_("Reg file %1 is owned by package %2"), currentRegFile, package));
	}
 }
 if (event["ID"]:nil == `_tp_add)
  {
           UI::OpenDialog(
            `VBox(
                // translators: combo box for selsect module from installed unknown modules
                `TextEntry(`id(`filename), _("Name of New File") ),
                `HBox(
                    `PushButton(`id(`ok), `opt(`default), Label::OKButton() ),
                    `PushButton(`id(`cancel), Label::CancelButton() )
                    )
                )
            );

      UI::SetFocus( `id( `filename ) );

            symbol ret = (symbol) UI::UserInput();

            if( ret == `ok ) {
                string filename = sformat("/etc/slp.reg.d/%1", (string) UI::QueryWidget( `id(`filename), `Value ) );
		if (contains(keys, filename)){
		  Popup::Error(_("File with that name already exists"));
		 } else {
	SlpServer::reg_files = add(SlpServer::reg_files, $[
	        "name" : filename,
	        "value" : [],
	        "type" : -1,
		"file" : -1,
		"kind" : "section",
	        "comment" : ""
	        ]);
		}
            }
	UI::CloseDialog();
	initReg("");
  }
return nil;
}


// log viewer for General Dialog
define symbol handleShowLog(string key, map event ) ``{
 if (event["ID"]:nil == `show_log)
  {
        string log = "";
        log = splitstring( log, " " )[0]:"/var/log/slpd.log" ;

  LogView::Display ($[
            "command" : sformat( "tail -f %1 -n 100", log ),
            "save" : false,
        ]);
  }
 return nil;
}

// handler for Expert Settings button
define symbol handleExpert(string key, map event ) ``{
 if (event["ID"]:nil == `expert)
  {
   // goto ExpertDialog (server_table)
   return `expert;
  }
 return nil;
}


// internal function:
// changing response

void changeResponseTo(symbol resp){
   switch (resp){
   case(`bc) : y2milestone("Use broadcast");
                UI::ChangeWidget(`id(`ip), `Enabled, false);
                UI::ChangeWidget(`id(`scope), `Enabled, false);
		SlpServer::slp_config["net.slp.isda"]="false";
		SlpServer::slp_config["net.slp.isbroadcastonly"]="true";
                break;
   case(`mc) : y2milestone("Use multicast");
                UI::ChangeWidget(`id(`ip), `Enabled, false);
                UI::ChangeWidget(`id(`scope), `Enabled, true);
		SlpServer::slp_config["net.slp.isda"]="false";
		SlpServer::slp_config["net.slp.isbroadcastonly"]="false";
                break;
   case(`da) : y2milestone("Use DA Server");
                UI::ChangeWidget(`id(`ip), `Enabled, true);
                UI::ChangeWidget(`id(`scope), `Enabled, true);
		SlpServer::slp_config["net.slp.isda"]="false";
                break;
   case(`da_server) : y2milestone("Becomes DA Server");
                UI::ChangeWidget(`id(`ip), `Enabled, false);
//                UI::ChangeWidget(`id(`scope), `Enabled, false);
		SlpServer::slp_config["net.slp.isda"]="true";
                break;
   }

}

//	***	server settings (response + scopes)	***
define void initServerSettings(string key) ``{
 symbol mode = nil;
 keys = [];
 UI::ChangeWidget(`id(`ip), `Value, String::CutBlanks( SlpServer::slp_config["net.slp.daaddresses"]:"") );
 UI::ChangeWidget(`id(`scope), `Value, SlpServer::slp_config["net.slp.usescopes"]:"");
 if (SlpServer::slp_config["net.slp.isda"]:"false" == "true") mode = `da_server;
  else
   if (SlpServer::slp_config["net.slp.isbroadcastonly"]:"false" == "true") mode = `bc;
    else
	if (size(deletechars(SlpServer::slp_config["net.slp.daaddresses"]:"", " "))>0) mode = `da;
		else mode = `mc;
 UI::ChangeWidget(`id(`resp), `CurrentButton, mode);
 changeResponseTo(mode);
}

define symbol handleServerSettings(string key, map event ) ``{
 if ( event["EventReason"]:"" == "ValueChanged" )
  {
   changeResponseTo(event["WidgetID"]:`nil);
  }
 return nil;
}

void storeServerSettings(string option_id, map option_map) ``{
 SlpServer::slp_config["net.slp.usescopes"]=UI::QueryWidget(`id(`scope), `Value);
 SlpServer::slp_config["net.slp.daaddresses"]=UI::QueryWidget(`id(`ip), `Value);
};

define boolean validateServerSettings (string key, map event)
{
 if (UI::QueryWidget(`id(`resp), `CurrentButton) == `da)
  {
   boolean ip_valid = true;
   if ((string)UI::QueryWidget(`id(`ip), `Value) == "") ip_valid = false;
   foreach(string ip, splitstring((string)UI::QueryWidget(`id(`ip), `Value), ","), {
    if(!Address::Check4(String::CutBlanks(ip)) && !Address::Check6(String::CutBlanks(ip))) ip_valid = false;
   });
   if (!ip_valid){
     Popup::Error (_("Scope and IP address must be inserted."));
     return false;
   }
  }
 if (UI::QueryWidget(`id(`resp), `CurrentButton) == `mc)
  {
   if ( UI::QueryWidget(`id(`scope), `Value)=="" )
    {
     Popup::Error (_("Scope must be inserted."));
     return false;
    }
  }
 return true;
}
// description map for tabs in overview dialog
map tabs_descr = $[
	"general":$[
	 "header"	: _("Global SLP Configuration"),
	 "contents"	:
			  `VBox(
			  `VStretch(),
			  `HBox(
	                   `HStretch(),
                           `HSpacing (1),
			    `VBox(
				"auto_start_up",
				`VSpacing (2),
				"firewall",
				`VSpacing (2),
				"view_log",
				`VSpacing(2)
				),
                           `HSpacing (1),
                           `HStretch()
			      ),
			  `VStretch()
			),
	 "widget_names"	: [ "auto_start_up", "firewall", "view_log" ]
	],

	"server":$[
	 "header"	: _("SLP Server Configuration"),
	 "contents"	:
			  `VBox(
			  `VStretch(),
			  `HBox(
                           `HStretch(),
                           `HSpacing (1),
			    `VBox(
				"server_settings",
				`VSpacing (2),
				"expert",
				`VSpacing (2)
				),
                           `HSpacing (1),
                           `HStretch()
			       ),
			  `VStretch()
			),
	 "widget_names"	: [ "server_settings", "expert" ]
	],
	"server_details"	: $[
		"header" : _("Server Details"),
		"contents" :
			`VBox(
			`VStretch(),
			`HBox(
                           `HStretch(),
                           `HSpacing (1),
			   `VBox(
				"server_table",
				`VSpacing (2)
				),
                           `HStretch(),
                           `HSpacing (1)
			),
			`VStretch()
			),
		"widget_names"	: [ "server_table" ]
	],
	"static"	: $[
		"header" : _("Static Configuration Files"),
		"contents" :
			`VBox(
				"reg_table"
			),
		"widget_names"	: [ "reg_table" ]
	]
];

/**
 * Overview dialog
 * @return dialog result
 */
any OverviewDialog() {

    /* SlpServer overview dialog caption */
    string caption = _("SLP Server Overview");

    map widget_descr = $[
        "tab": CWMTab::CreateWidget($[
            "tab_order": [ "general", "server", "static" ],
            "tabs": tabs_descr,
            "widget_descr": widgets,
            "initial_tab" : current_tab,
            "tab_help" : _("<h1>SLP Server</h1>"),
        ]),
    ];
    term contents = `VBox( "tab");

    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)widget_descr);
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);

    Wizard::SetContentsButtons(caption, contents, help, Label::NextButton (), Label::FinishButton ());
    Wizard::HideBackButton();

    symbol ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// dialog for expert settings
any ExpertDialog () {
    current_tab="server";
    copy_config = SlpServer::slp_config;
    string caption = _("SLP Server Configuration--Expert Dialog");

    list<map <string, any> > w = CWM::CreateWidgets (["server_table"], (map <string, map <string, any> >)widgets);
        term contents = `HBox (`HSpacing (1), `VBox (
            `VSpacing (1),
            w[0, "widget"]:`VSpacing (1)
        ), `HSpacing (1));
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["expert"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// edit reg file dialog
any editRegFile() {
    current_tab="static";
    string caption = _("SLP Server Configuration--Edit .reg File");

    list<map <string, any> > w = CWM::CreateWidgets (["regedit_table"], (map <string, map <string, any> >)widgets);
        term contents = `HBox (`HSpacing (1), `VBox (
            `VSpacing (1),
            w[0, "widget"]:`VSpacing (1)
        ), `HSpacing (1));
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["regedit"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}


/* EOF */
}
